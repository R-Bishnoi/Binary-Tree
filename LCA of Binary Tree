
//Brute force approach

//lowest common ancester in a binary Tree (DFS traversal)
#include<bits/stdc++.h>
using namespace std;

class node{
    
    public:
    
    int data;
    struct node* left;
    struct node* right;
    
 node(int val){
     data=val;
     left=NULL;
     right=NULL;
 }
};


//here we can take 0 instead of INT_MIN but if 0 is present in bt then it create problem 
//brute force approach time complexity o(n) and space complexity o(n)

int solve(node* root,vector<int>&v,int k){
    
   if(root==NULL)return INT_MIN;
   
   if(root->data==k){
       v.push_back(root->data);
       return root->data;
   }
   
   
   int l=solve(root->left,v,k);
   int r=solve(root->right,v,k);
    
  
 if(l==k || r==k){
     v.push_back(root->data);
     return k;
 } 
 
 else{
     return INT_MIN;
 }
    
    
}



int main(){
    
  node* root=new node(5);
  node* a=new node(4);
  node* b=new node(6);
  node* c=new node(8);
  node* d=new node(0);
  node* e=new node(7);
   
   root->left=a;
   root->right=b;
   a->left=c;
   a->right=d;
   d->right=e;
 
 
//for lca

vector<int>v1;
solve(root,v1,7);
vector<int>v2;
solve(root,v2,8);


reverse(v1.begin(),v1.end());
reverse(v2.begin(),v2.end());


for(int i=0;i<v1.size();i++){
    cout<<v1[i]<<" ";
}
cout<<endl;
cout<<endl;

for(int i=0;i<v2.size();i++){
    cout<<v2[i]<<" ";
}

cout<<endl;



int n=min(v1.size(),v2.size());

int lca;
for(int i=0;i<n;i++){
    if(v1[i]!=v2[i])break;
    lca=v1[i];
}


cout<<"lca = "<<lca<<endl;

    return 0;
}




//optimize solution


class Solution
{
    public:
  
    Node* lca(Node* root ,int n1 ,int n2 ){
        
     if(root==NULL)return NULL;
     
     if(root->data==n1 || root->data==n2)return root;

    Node* x= lca(root->left,n1,n2);
    Node* y =lca(root->right,n1,n2);
     
     if(x == NULL)
     return y;
 
 else if(y == NULL)
     return x;
 else
     return root;
        
      
    }
};
















